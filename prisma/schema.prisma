generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model AllowedUser {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  email String? @unique
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                       String                     @id @default(auto()) @map("_id") @db.ObjectId
  name                     String
  email                    String?                    @unique
  emailVerified            DateTime?
  image                    String?
  role                     Role                       @default(STUDENT)
  lists                    List[]                     @relation("userToList")
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  accounts                 Account[]
  sessions                 Session[]
  SpellingMetrics          SpellingMetrics[]
  UserPronunciationMetrics UserPronunciationMetrics[]
}

model List {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  createdBy   User     @relation("userToList", fields: [createdById], references: [id])
  createdById String   @db.ObjectId
  items       Item[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Item {
  id                         String                    @id @default(auto()) @map("_id") @db.ObjectId
  text                       String
  list                       List                      @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId                     String                    @db.ObjectId
  createdAt                  DateTime                  @default(now())
  updatedAt                  DateTime                  @updatedAt
  userPronunciationMetrics   UserPronunciationMetrics? @relation(fields: [userPronunciationMetricsId], references: [id])
  userPronunciationMetricsId String?                   @unique @db.ObjectId
}

model UserPronunciationMetrics {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  spellingMetrics SpellingMetrics[]
  userId          String            @db.ObjectId
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Item            Item?
}

type SpellingMetrics {
  words              Words[]
  score              Int
  accent_predictions AccentPrediction
  score_estimates    ScoreEstimates
}

type Words {
  label     String
  syllables Syllables[]
  phones    Phones[]
  score     Int
}

type Syllables {
  label     String
  label_ipa String
  score     Int
  phones    Phones[]
}

type Phones {
  label       String
  label_ipa   String
  confidence  Int
  score       Int
  error       Boolean
  sounds_like SoundsLike[]
}

type SoundsLike {
  label      String
  label_ipa  String
  confidence Int
}

type AccentPrediction {
  en_US Int
  en_UK Int
  en_AU Int
}

type ScoreEstimates {
  ielts       String
  toefl       String
  cefr        String
  pte_general String
}

enum Role {
  SPEECH_THERAPIST
  STUDENT
}
